// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/widget_to_image_converter.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class WidgetToImageConverterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WidgetToImageConverterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WidgetToImageConverterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Convert RGBA image data to JPEG and save to file
  ffi.Pointer<ffi.Char> convert_rgba_to_jpeg(
    ffi.Pointer<ffi.Uint8> rgba_data,
    int width,
    int height,
    int quality,
    ffi.Pointer<ffi.Char> output_path,
  ) {
    return _convert_rgba_to_jpeg(
      rgba_data,
      width,
      height,
      quality,
      output_path,
    );
  }

  late final _convert_rgba_to_jpegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('convert_rgba_to_jpeg');
  late final _convert_rgba_to_jpeg = _convert_rgba_to_jpegPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Uint8>, int, int, int, ffi.Pointer<ffi.Char>)>();

  /// Convert RGBA file to JPEG and save to file
  ffi.Pointer<ffi.Char> convert_rgba_file_to_jpeg(
    ffi.Pointer<ffi.Char> input_path,
    int width,
    int height,
    int quality,
    ffi.Pointer<ffi.Char> output_path,
  ) {
    return _convert_rgba_file_to_jpeg(
      input_path,
      width,
      height,
      quality,
      output_path,
    );
  }

  late final _convert_rgba_file_to_jpegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('convert_rgba_file_to_jpeg');
  late final _convert_rgba_file_to_jpeg =
      _convert_rgba_file_to_jpegPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();
}
